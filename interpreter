type 't env = (string * 't) list	 
exception WrongBindlist 
let emptyenv(x) = [("",x)]
let rec applyenv(x,y) = match x with
| [(_,e)] -> e
| (i1,e1) :: x1 -> if y = i1 then e1 
else applyenv (x1, y)
| [] -> failwith "Wrong environment"	
let bind(r, l, e) = (l, e) :: r
type ide = string

type intlist = Nil | Cons of exp * intlist 


and exp = 
| Eint of int
| Ebool of bool
| Var of ide
| Intlist of intlist
| OP of string * exp * exp 
| And of exp * exp
| Or of exp * exp
| Not of exp
| Fun of ide * exp
| Appl of exp * exp

and eval =
| Int of int
| Bool of bool
| Unbound
| Funval of efun

and efun = exp * eval env

let plus (x,y) = 
(match (x,y) with 
| (Int(u), Int(w)) -> Int(u+w)
| _ -> failwith ("type error"))

let diff (x,y) =
(match (x,y) with
| (Int(u), Int(w)) -> Int(u-w)
| _ -> failwith ("type error"))

let mult (x,y) =
(match (x,y) with
| (Int(u), Int(w)) -> Int(u*w)
| _ -> failwith ("type error"))

let eq (x,y) =
(match (x,y) with
| (Int(u), Int(w)) -> Bool(u = w)
| _ -> failwith ("type error"))

let et (x,y) =
(match (x,y) with
| (Bool(u), Bool(w)) -> Bool(u && w)
| _ -> failwith ("type error"))

let mineq (x,y) = 
(match (x,y) with
| (Int(u), Int(w)) -> Bool(u <= w)
| _ -> failwith ("type error"))

let op (x,y) =
(match (x,y) with
| (Bool(u), Bool(w)) -> Bool(u || w)
| _ -> failwith ("type error"))

let non x =
(match x with 
| Bool(u) -> Bool(not u)
| _ -> failwith ("type error"))

let rec compare x y = 
(match x, y with
| Nil, Nil -> true
| Nil, _
| _, Nil -> false
| Cons(Eint(h1), l1), Cons(Eint(h2), l2) -> h1 = h2 && compare l1 l2
| _ -> failwith ("type error"))

let rec sublist x y = 
(match x, y with
| Nil, _ -> true
| _, Nil -> false
| Cons(Eint(h1), l1), Cons(Eint(h2), l2) -> h1 = h2 && sublist l1 l2
| _ -> failwith ("type error"))


let rec sem ((e:exp), (r:eval env)) =
match e with 
| Eint(n) -> Int(n)
| Ebool(b) -> Bool(b)
| Var(i) -> applyenv(r,i)
| OP(op,a,b) -> 
(match op with
| "+" -> plus(sem(a, r), sem(b, r))
| "-" -> diff(sem(a, r), sem(b, r))
| "*" -> mult(sem(a, r), sem(b, r))
| "=" -> eq(sem(a, r), sem(b, r))
| "<=" -> mineq(sem(a, r), sem(b, r)) 
| _ -> failwith ("wrong operator"))
| And(a,b) -> et(sem(a, r), sem(b, r))
| Or(a,b) -> op(sem(a, r), sem(b, r)) 
| Not(b) -> non(sem(b, r))
| Fun(x,a) -> Funval(e, r)
| Appl(e1,e2) -> (match sem(e1, r) with 
| Funval(Fun(x, a), r1) -> sem(a, bind(r1, x, sem(e2, r)))
| _ -> failwith ("no funct in apply"))

let r = emptyenv Unbound
let execSem (e: exp) = sem(e, r)

TESTCASES:

let testOP = OP("+",OP("-",Eint(10),OP("*",Eint(2),Eint(3))),Eint(2));;
let testOPdue = OP("=", testOP, Eint(6));;
execSem(testOPdue);;



